R = Something new

R Origin = Something new

R DefaultBehavior = R Origin mimic
R DefaultBehavior mimic = DefaultBehavior cell(:mimic)
R DefaultBehavior cell = DefaultBehavior cell(:cell)

R Something = R Kind new

R Reflector = R Something new
R Reflector other:mimic = Reflector cell(:other:mimic)

R Ground = R Kind extend

/# R Kind = new O
# let @ = R Kind
# 	@cells[\:prototype] = new O
# 	@mimic @cell(\:prototype)

# 	let @ = @cell(\:prototype)
# 		@cells[\:initialize] = (call) ->
# 			@cells[\:prototype] = new O(R Something)
# 			@extend = R Kind.extend
# 			@new = R Kind.new

# 		@extend = ->
# 			k = new O(R Kind::)

# 			k:: = new O(@::)

# 			k

# 		@new = ->
# 			o = new O(@cell(\:prototype))

# 			o.send(\initialize, ...)

# 			o

# 		@cells[\:new] = (call) ~>
# 			self = call.receiver
# 			msg  = call.msg
# 			args = msg.args

# 			@new.call(self, ...args)

# 		@cells[\:extend] = (call) ~>
# 			self = call.receiver

# 			@extend.call(self)

# 	@extend = @cell(\:prototype).extend
# 	@new = @cell(\:prototype).new

# R Something = R Kind.new!
# let @ = R Something
# 	let @ = @cell(\:prototype)
# 		@mimic R DefaultBehavior

# 		@cells[\:initialize] = 'hi'

# R Kind.cell(\:prototype).mimic R Something

# R NativeFunction = new O(R DefaultBehavior)

# 	# (@fn) -> super!

# 	# activatable: true

# 	# activate: (call) ->
# 	# 	@fn(call)

# 	# @::cells = Object.new(R DefaultBehavior::cells)

# R Call = R Something.extend!
# 	# (@ground, @seq, @self, @msg) -> super!

# R String = R Something.extend!
# 	# (@val) -> super!
# 	# inspect: -> util.inspect(@val)
# 	# id: -> "s#{@val}"

# R Symbol = R Something.extend!
# 	# (@val) -> super!
# 	# inspect: -> ":#{util.inspect(@val)}"
# 	# id: -> ":#{@val}"

# R Number = R Something.extend!
# 	# (@val) -> super!
# 	# inspect: -> util.inspect(@val)

# R Ground = R Something.extend!
# 	# receive: (call) ->
# 	# 	msg = call.msg

# 	# 	switch msg.id.constructor
# 	# 	| R String => msg.id
# 	# 	| R Symbol =>
# 	# 		if parseInt(msg.id.val)
# 	# 			new R Number(parseInt(msg.id.val))
# 	# 		else
# 	# 			super(...)
# 	# 	| _ => super(...)

# 	# @::cells = {}

# # R methods =
# # 	'internal:createSymbol': new R NativeFunction (call) -> call.msg.args[0].msgs[0].id
# # 	'=': new R NativeFunction (call) ->
# # 		msg = call.msg
# # 		args = msg.args
# # 		self = call.receiver
# # 		self.cells[args[0].msgs[0].id.id!] = I(call.ground, args[1])

# R Parser = R Something.new!
# let @ = R Parser
# 	@parse = parseR parse

# 	@Shuffler = R Something.new!
# 	let @ = @Shuffler
# 		@assignment = shuffleR assignment#/

R Interpreter = R Something new
R Interpreter run = Interpreter cell(:run)

R Origin removeAllMimics

R